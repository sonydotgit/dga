import pickle
import time
import joblib
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer

def predict(progress_queue, domain):
    progress_queue.put((10, "Loading datasets from disk"))
    with open('input data/training_data.pkl', 'rb') as f:
        training_data = pickle.load(f)
    time.sleep(1)

    progress_queue.put((30, "Loading model from disk"))
    clf = joblib.load('input data/model.pkl')
    time.sleep(1)

    progress_queue.put((60, "Loading and preparing data for model"))
    vectorizer = CountVectorizer(ngram_range=(3, 5),
                                analyzer='char',
                                max_df=1.0,
                                min_df=0.0001)

    ngram_matrix = vectorizer.fit_transform(
            training_data['legit']['domain']
            )
    ngram_counts = ngram_matrix.sum(axis=0).getA1()

    progress_queue.put((80, "Predicting..."))
    match = ngram_counts * vectorizer.transform([domain]).transpose()

    print(domain)
    x_pred = [len(domain), match]
    print([x_pred])
    x_pred = np.array(x_pred, dtype=object)
    print(clf.predict([x_pred]))
    if clf.predict([x_pred]) == 'dga':
        progress_queue.put((99, "Generated by DGA!"))
    else:
        progress_queue.put((99, "Domain is safe."))
